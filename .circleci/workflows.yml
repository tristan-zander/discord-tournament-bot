version: 2.1

orbs:
  doctl: digitalocean/cli@0.1.1

parameters:
  modified-root-manifest:
    type: boolean
    default: false
  modified-common:
    type: boolean
    default: false
  modified-discord-bot:
    type: boolean
    default: false
  modified-matchmaking-service:
    type: boolean
    default: false
  rerun-all:
    type: boolean
    default: false

executors:
  # TODO: make a common Dockerfile in the common package
  common:
    docker:
      - image: alpine:latest
    working_directory: /tmp/app

workflows:
  discord-bot:
    when:
      or:
        - << pipeline.parameters.modified-root-manifest >>
        - << pipeline.parameters.modified-common >>
        - << pipeline.parameters.modified-discord-bot >>
        - << pipeline.parameters.rerun-all >>
    jobs:
      - test-discord-bot
      # - coverage-discord-bot
      - doctl/install_and_initialize_cli:
          filters:
            branches:
              only: main
      - release-discord-bot:
          requires:
            - doctl/install_and_initialize_cli
          filters:
            branches:
              only: main

jobs:
  # TODO: Upload code coverage eventually
  # coverage-discord-bot:
  #   machine: true
  #   steps:
  #     - checkout
  #     - run:
  #         name: Coverage with docker
  #         command: |
  #           docker run --security-opt seccomp=unconfined -v "${PWD}:/volume" xd009642/tarpaulin sh -c \
  #           "apt-get update && apt-get install librdkafka-dev cmake make libssl-dev && cargo tarpaulin -p discord-bot --release --all-features -l --locked --out Xml --ciserver circle-ci --engine Llvm"
  #     - run:
  #         name: Install Test Coverage
  #         command: |
  #           curl -Os https://uploader.codecov.io/latest/alpine/codecov
  #           chmod +x codecov
  #           ./codecov
  test-discord-bot:
    executor: common
    resource_class: large
    steps:
      - run:
          name: Install Build Dependencies
          command: apk add --no-cache bash rustup openssl openssl-dev pkgconfig librdkafka cmake make gcc g++ git openssh curl docker
      - restore_cache:
          keys:
            - test-tools-v1
      - run:
          name: Install Rust
          shell: /bin/bash -eo pipefail
          command: |
            rustup-init -y
            source ~/.cargo/env
            rustup toolchain install stable
            echo 'source $HOME/.cargo/env' >> $BASH_ENV
      - checkout
      - save_cache:
          key: test-tools-v1
          paths:
            - /root/.cargo
      - restore_cache:
          keys:
            - 'cargo-{{ checksum "Cargo.lock" }}'
      - run:
          name: Run cargo check
          shell: /bin/bash -eo pipefail
          command: cargo check --release -p discord-bot
      - run:
          name: Run tests
          shell: /bin/bash -eo pipefail
          command: cargo test --release -p discord-bot
      - run:
          name: Check formatting
          shell: /bin/bash -eo pipefail
          command: |
            rustup component add rustfmt
            cargo fmt -p discord-bot --check
      - save_cache:
          key: 'cargo-{{ checksum "Cargo.lock" }}'
          paths:
            - ~/.cargo

  release-discord-bot:
    executor: common
    resource_class: large
    steps:
      - run:
          name: Install Script Dependencies
          command: |
            apk add --no-cache sudo docker npm git

      - run:
          name: Install Build Dependencies
          command: apk add --no-cache bash openssl openssl-dev pkgconfig librdkafka cmake make gcc g++ openssh 'cargo>1.57'

      - setup_remote_docker

      - checkout

      - restore_cache:
          keys:
            - semantic-release-rust
      - run:
          name: Setup semantic release
          command: |
            npm install
            cargo install semantic-release-rust --version 1.0.0-alpha.8
            cargo install cargo-workspaces --version ^0.2
            echo 'export PATH=$PATH:~/.cargo/bin' >> $BASH_ENV
            export PATH=$PATH:~/.cargo/bin
          working_directory: /tmp/app/discord-bot
      - save_cache:
          paths:
            - "/root/.cargo/"
          key: semantic-release-rust

      - run:
          name: Run semantic-release
          command: npx semantic-release
          working_directory: /tmp/app/discord-bot
