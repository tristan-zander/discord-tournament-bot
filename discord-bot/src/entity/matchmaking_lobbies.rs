//! `SeaORM` Entity. Generated by sea-orm-codegen 0.6.0

use super::sea_orm_active_enums::LobbyPrivacy;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use twilight_model::id::marker::ChannelMarker;

use crate::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "matchmaking_lobbies")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub started_at: DateTimeUtc,
    pub timeout_after: DateTimeUtc,
    pub channel_id: IdWrapper<ChannelMarker>,
    pub description: Option<String>,
    pub owner: Uuid,
    #[sea_orm(default_value = LobbyPrivacy::Open)]
    pub privacy: LobbyPrivacy,
    pub game: Option<Uuid>,
    pub game_other: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::game::Entity",
        from = "Column::Game",
        to = "super::game::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Game,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::Owner",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
    #[sea_orm(has_many = "super::matchmaking_player_lobby::Entity")]
    MatchmakingPlayerLobby,
}

impl Related<super::game::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Game.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::matchmaking_player_lobby::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MatchmakingPlayerLobby.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
