//! `SeaORM` Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "matchmaking_player_lobby")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub player: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub lobby: Uuid,
    pub character: Option<Uuid>,
    pub character_other: Option<String>,
    pub joined_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::game_character::Entity",
        from = "Column::Character",
        to = "super::game_character::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GameCharacter,
    #[sea_orm(
        belongs_to = "super::matchmaking_lobbies::Entity",
        from = "Column::Lobby",
        to = "super::matchmaking_lobbies::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    MatchmakingLobbies,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::Player",
        to = "super::users::Column::UserId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::game_character::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameCharacter.def()
    }
}

impl Related<super::matchmaking_lobbies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MatchmakingLobbies.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
