//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "game")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::matchmaking_lobbies::Entity")]
    MatchmakingLobbies,
    #[sea_orm(has_many = "super::game_character::Entity")]
    GameCharacter,
    #[sea_orm(has_many = "super::matchmaking_invitation::Entity")]
    MatchmakingInvitation,
}

impl Related<super::matchmaking_lobbies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MatchmakingLobbies.def()
    }
}

impl Related<super::game_character::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameCharacter.def()
    }
}

impl Related<super::matchmaking_invitation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MatchmakingInvitation.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
