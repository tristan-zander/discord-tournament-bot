//! `SeaORM` Entity. Generated by sea-orm-codegen 0.9.3

pub use crate::entity::prelude::*;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use twilight_model::id::marker::{ChannelMarker, GuildMarker, RoleMarker};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "matchmaking_settings")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub guild_id: IdWrapper<GuildMarker>,
    pub has_accepted_eula: Option<DateTimeUtc>,
    #[sea_orm(default_value = Utc::now())]
    pub last_updated: DateTimeUtc,
    pub channel_id: Option<IdWrapper<ChannelMarker>>,
    pub admin_role: Option<IdWrapper<RoleMarker>>,
    #[sea_orm(default_value = false)]
    pub threads_are_private: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
