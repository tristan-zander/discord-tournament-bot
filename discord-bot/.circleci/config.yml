# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test-development:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # TODO: use Dockerfile within this repo
      - image: alpine:latest
    resource_class: medium
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - run:
          name: Install Build Dependencies
          command: apk add --no-cache 'cargo>1.57' openssl openssl-dev pkgconfig librdkafka cmake make gcc g++ git openssh
      - checkout
      - run: git submodule sync
      - run: git submodule update --init --recursive
      - run:
          name: Test project
          command: cargo test --all-features

  build-release:
    docker:
      - image: docker:latest
    resource_class: large
    steps:
      - run:
          name: Install Script Dependencies
          command: |
            apk add --no-cache sudo 'cargo>1.57' wget tar docker npm git
      
      - run:
          name: Install Build Dependencies
          command: apk add --no-cache openssl openssl-dev pkgconfig librdkafka cmake make gcc g++ openssh

      - setup_remote_docker
      
      - checkout
      - run: git submodule sync
      - run: git submodule update --init --recursive

      - run:
          name: Install DigitalOcean tools
          command: |
            mkdir -p tmp
            wget -O tmp/doctl.tar.gz https://github.com/digitalocean/doctl/releases/download/v1.82.2/doctl-1.82.2-linux-amd64.tar.gz 
            tar xf tmp/doctl.tar.gz --directory tmp/
            chmod +x tmp/doctl
            sudo mv tmp/doctl /usr/local/bin

      - run:
          name: Login to DigitalOcean
          command: |
            doctl auth init --output json --access-token $DIGITALOCEAN_ACCESS_TOKEN
            doctl account get --output json --access-token $DIGITALOCEAN_ACCESS_TOKEN
            doctl registry login --access-token $DIGITALOCEAN_ACCESS_TOKEN --output json

      - restore_cache:
          keys:
            - semantic-release-rust
      - run:
          name: Setup semantic release
          command: |
            npm install
            cargo install semantic-release-rust --version 1.0.0-alpha.8
      - save_cache:
          paths:
            - "/root/.cargo/"
          key: semantic-release-rust
      
      - run:
          name: Run semantic-release
          command: PATH=$PATH:~/.cargo/bin npx semantic-release

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  pull-request:
    jobs:
      - test-development:
          filters:
            branches:
              ignore: main
  publish-release:
    jobs:
      - build-release:
          filters:
            branches:
              only: main
  # bot-publish-dockerfile-release:
  # bot-notify-release: # Notifies the Release that it needs to update itself
  # bot-notify-sandbox: # Notifies the Sandbox that it needs to update itself
